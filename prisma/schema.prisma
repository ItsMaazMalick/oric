generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String   @unique
  password   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id                          String                        @id @default(auto()) @map("_id") @db.ObjectId
  title                       String
  name                        String
  email                       String                        @unique
  cnic                        String                        @unique
  dob                         String
  password                    String
  role                        String                        @default("user")
  gender                      String
  department                  String
  faculty                     String
  phoneNo                     String
  cellNo                      String
  researchDomain              String
  highestDegree               String
  researchPublication         ResearchPublication[]
  bookAuthoredEdited          BookAuthoredEdited[]
  researchProject             ResearchProject[]
  training                    Training[]
  thesis                      Thesis[]
  policyAdvocacy              PolicyAdvocacy[]
  linksEstablished            LinksEstablished[]
  contractResearchAward       ContractResearchAward[]
  civicEngagementEvent        CivicEngagementEvent[]
  consultancyContract         ConsultancyContract[]
  patentsTrademark            PatentsTrademark[]
  researchProductsProcess     ResearchProductsProcess[]
  scienceArtsProduct          ScienceArtsProduct[]
  agreementSigned             AgreementSigned[]
  nationalInternationalAwards NationalInternationalAwards[]
  hec                         Hec[]
  community                   Community[]
  mentorship                  Mentorship[]
  studentOrganization         StudentOrganization[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
}

// 1 - 
model ResearchPublication {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  year           String
  country        String
  journalName    String
  title          String
  authorName     String
  category       String
  status         String
  issn           String
  volume         String
  pages          Int
  affiliation    String
  link           String
  countries      String[]
  addressing     String[]
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// 2 -  
model BookAuthoredEdited {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  isbn           String
  role           String
  pages          Int
  year           String
  country        String
  bookTitle      String
  chapterTitle   String?
  publisherName  String
  affiliation    String
  link           String
  addressing     String[]
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// 3 - 
model ResearchProject {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String         @db.ObjectId
  date                 String
  agency               String
  name                 String
  status               String
  type                 String
  role                 String
  grantAmount          Int
  title                String
  startDate            String
  endDate              String
  totalFunding         Int
  collaboratingPartner String?
  coFundingPartner     String?
  completion           String
  remarks              String?
  file                 String
  approvedStatus       ApprovedStatus @default(pending)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

// 4 - 
model Training {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String         @db.ObjectId
  eventType        String
  applicantRole    String
  startDate        String
  endDate          String
  eventTitle       String
  noOfParticipants Int
  majorFocusArea   String
  audienceType     String[]
  organizer        String
  country          String
  approvedStatus   ApprovedStatus @default(pending)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// 5 - 

// 7 -
model Thesis {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String         @db.ObjectId
  role             String
  nameOfSupervisor String?
  year             String
  degreeLevel      String
  degreeProgram    String
  department       String
  university       String
  studentName      String
  degreeStage      String
  approvedStatus   ApprovedStatus @default(pending)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// 8 - 
model PolicyAdvocacy {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String         @db.ObjectId
  year                    String
  nameOfGovernmentBody    String
  nameOfResearcher        String
  designationOfResearcher String
  areaAdvocated           String
  brief                   String
  partners                String
  advocacyTools           String
  policyCaseStudyCopy     String
  approvedStatus          ApprovedStatus @default(pending)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

// 9 - 
model LinksEstablished {
  id                           String         @id @default(auto()) @map("_id") @db.ObjectId
  user                         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                       String         @db.ObjectId
  linkageType                  String
  scope                        String
  nameOfCollaboratingAgency    String
  countryOfCollaboratingAgency String
  scopeOfCollaboration         String
  linkageDate                  String
  mouCopy                      String
  approvedStatus               ApprovedStatus @default(pending)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
}

// 10 - 
model ContractResearchAward {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String         @db.ObjectId
  scope                   String
  sponsoringAgencyCountry String
  contractAwardingAgency  String
  title                   String
  amountOfContract        Int
  role                    String
  nameOfPI                String?
  designationOfPI         String?
  organizationOfPI        String?
  startingDate            String
  endingDate              String
  dateOfContract          String
  contractResearchCopy    String?
  approvedStatus          ApprovedStatus @default(pending)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

// 11 - 
model CivicEngagementEvent {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  user                    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String         @db.ObjectId
  type                    String
  role                    String
  title                   String
  communityInvolved       String
  outcomes                String
  date                    String
  collaboratingAgency     String
  collaboratingAgencyName String
  briefReport             String
  approvedStatus          ApprovedStatus @default(pending)
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

// 12 - 
model ConsultancyContract {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String         @db.ObjectId
  consultancyType    String
  titleOfConsultancy String
  role               String
  companyName        String
  companyCountry     String
  contractValue      Int
  startDate          String
  endDate            String
  keyDeliverables    String
  remarks            String?
  copyOfContract     String
  approvedStatus     ApprovedStatus @default(pending)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

// 13 - 
model PatentsTrademark {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String         @db.ObjectId
  typeOfIP             String
  scope                String
  date                 String
  namesOfInventors     String
  inventionTitle       String
  IPStatus             String
  royaltyRevenue       Float
  keyScientificAspects String
  commertialPartners   String?
  evidence             String
  approvedStatus       ApprovedStatus @default(pending)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
}

// 14 - 
model ResearchProductsProcess {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  user                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String         @db.ObjectId
  type                     String
  category                 String
  developmentStatus        String
  date                     String
  nameOfInventors          String
  title                    String
  keyScientificAspects     String
  fieldOfUse               String
  collaboratingPartnerName String?
  financialSupport         Float
  evidence                 String
  approvedStatus           ApprovedStatus @default(pending)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
}

// 15 - 
model ScienceArtsProduct {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  category       String
  date           String
  scope          String
  title          String
  departmentName String
  evidence       String
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// 16 - 
model AgreementSigned {
  id                         String         @id @default(auto()) @map("_id") @db.ObjectId
  user                       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String         @db.ObjectId
  typeOfLinkage              String
  linkageEstablishmentDate   String
  scope                      String
  collaboratingAgency        String
  collaboratingAgencyCountry String
  duration                   String
  areaOfFocus                String
  mouCopy                    String
  approvedStatus             ApprovedStatus @default(pending)
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
}

model NationalInternationalAwards {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  date           String
  titleOfAward   String
  awardingAgency String
  amountOfPrize  Float?
  evidence       String
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Hec {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String         @db.ObjectId
  date                  String
  dataProvidedTo        String
  programOfOrganization String
  evidence              String
  approvedStatus        ApprovedStatus @default(pending)
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

// 17 - 
model Community {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  date           String
  role           String
  type           String
  title          String
  evidence       String
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// 18 - 
model Mentorship {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String         @db.ObjectId
  programName    String
  noOfStudents   Float
  role           String
  details        String
  evidence       String
  approvedStatus ApprovedStatus @default(pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model StudentOrganization {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String         @db.ObjectId
  organizationName String
  noOfMenbers      Int
  membersName      String
  role             String
  objectives       String
  link             String?
  evidence         String
  approvedStatus   ApprovedStatus @default(pending)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum ApprovedStatus {
  pending
  accepted
  rejected
}
